Demo - Adding a Data Store
I created the backend data store we're going to use throughout the course. We're going to add it to our project. You can find all these files in the starter files folder of this module or in the starter files folder on my GitHub. Select all of them, and copy them over to the root folder of our API project. It's going to ask to override two files, the Startup class and the Program class, and that's totally okay. We'll immediately check out the changes. There we go. Let's open Visual Studio again. Our new files and folders are already visible. The backend store is a database accessed through Entity Framework Core. So, all you're going to see should look pretty familiar if you have some experience with using Entity Framework Core. But if you don't, don't worry. For REST, it does not matter what technology the data store is accessed through, nor how the data is stored, as we'll learn soon enough. The code we will write will rely on our repository, keeping the way we access our data persistent agnostic. But as we are using Entity Framework Core, we do need to add a few references to our project. I've opened a NuGet dialog. First, let's add Entity Framework Core by searching for Microsoft.EntityFrameworkCore. Let's click Install. This package contains all the basic Entity Framework Core-related classes. We'll also want to add Microsoft.EntityFramework .Core .SqlServer. We will work with Visual Studio's localDB instance, and that requires this. Let's click Install. There we go. Lastly, we want to look for Microsoft.EntityFrameworkCore .Tools. This package contains tools to, for example, easily add migrations. We'll use those, so it's handy to have these tools installed. Let's click Install. And there we go, no more warnings or errors. So far, so good. Let's run through the code. Two entities have been added, an Author and a course. A database Context has been added, a CourseLibraryContext, and a Repository has been added, the CourseLibraryRepository. An author has fields like Id, FirstName, and LastName, and it contains a list of courses. A course then has fields you'd expect from a course, an Id, a Title, and a Description. Let's have a look at the DBContext. This exposes two DB sets, one with our Authors and one with our Courses. It also contains code to see to the database with some dummy data. We'll need add a migration for that to work, which we'll do in a few minutes. And now we have a repository, the CourseLibraryRepository. We will dive into the implementation once or twice during this course, but that's in fact not that important for our purposes. All we need to know is that we can use this repository from our controller action to interact with authors and courses. Let's open the Startup class. In the ConfigureServices method, the repository is registered on the container, and so is the DBContext. Note that we are hard coding the connection string. In a real-life situation, you'll probably want to store this in a save config file or an environment variable, but for demo purposes, this is okay. Lastly, let's have a look at the Program class. Here we ensure the database is deleted so we can start with a clean slate each time. Obviously, it's not a good idea to do this in a real-life project. Afterwards, we ensure it's created and migrated. The Migrate statement takes care of that. That'll also ensure it's seated with our dummy data, but instead for that to work, we'll first have to add such a migration. Let's open the Package Manager Console. If you don't see that, you can always look for it via the search box. To add a migration, we execute the Add-Migration command. We also pass in a name, say InitialMigration. And there we go, a Migrations folder has been added, and it contains our InitialMigration. Let's run this, this should result in our database being created and filter dummy data. And there we go, in the console window, we see insert statements for our dummy data. So, all in all this is a pretty normal setup, which undoubtedly looks familiar to you if you've already worked with ASP.NET Core and Entity Framework Core before, but anyway, all of this is just the plumbing to get started. We haven't got any controllers, and we're not returning any data yet. But by starting from a solution like this, we can focus on REST instead of the plumbing.
